<VisualMicro>
  <Program Name="FreeIMU_serial_GY88" Ext=".ino" Location="D:\Documents\Arduino\FreeIMU_serial_GY88">
    <Platform Name="arduino16x" Package="arduino" Platform="avr" Architecture="avr">
      <Board Name="mega_atmega2560" Description="Arduino Mega w/ ATmega2560 (Mega 2560)" CoreFolder="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" VariantFullPath="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" McuIdePath="C:\Program Files (x86)\Arduino" McuSketchBookPath="D:\Documents\Arduino" name="Arduino Mega w/ ATmega2560 (Mega 2560)" vid.0="0x2341" pid.0="0x0010" vid.1="0x2341" pid.1="0x0042" vid.2="0x2A03" pid.2="0x0010" vid.3="0x2A03" pid.3="0x0042" vid.0x2A03.warning="Uncertified" upload.tool="avrdude" upload.maximum_data_size="8192" bootloader.tool="avrdude" bootloader.low_fuses="0xFF" bootloader.unlock_bits="0x3F" bootloader.lock_bits="0x0F" build.f_cpu="16000000L" build.core="arduino" build.variant="mega" build.board="AVR_MEGA2560" menu.cpu.atmega2560="ATmega2560 (Mega 2560)" menu.cpu.atmega2560.upload.protocol="wiring" menu.cpu.atmega2560.upload.maximum_size="253952" menu.cpu.atmega2560.upload.speed="115200" menu.cpu.atmega2560.bootloader.high_fuses="0xD8" menu.cpu.atmega2560.bootloader.extended_fuses="0xFD" menu.cpu.atmega2560.bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" menu.cpu.atmega2560.build.mcu="atmega2560" menu.cpu.atmega2560.build.board="AVR_MEGA2560" menu.cpu.atmega1280="ATmega1280" menu.cpu.atmega1280.upload.protocol="arduino" menu.cpu.atmega1280.upload.maximum_size="126976" menu.cpu.atmega1280.upload.speed="57600" menu.cpu.atmega1280.bootloader.high_fuses="0xDA" menu.cpu.atmega1280.bootloader.extended_fuses="0xF5" menu.cpu.atmega1280.bootloader.file="atmega/ATmegaBOOT_168_atmega1280.hex" menu.cpu.atmega1280.build.mcu="atmega1280" menu.cpu.atmega1280.build.board="AVR_MEGA" runtime.ide.path="C:\Program Files (x86)\Arduino" build.system.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\system" runtime.ide.version="161" originalid="mega" tools.atprogram.cmd.path="%AVRSTUDIO_EXE_PATH%\atbackend\atprogram" tools.atprogram.cmd.setwinpath="true" tools.atprogram.program.params.verbose="-v" tools.atprogram.program.params.quiet="-q" tools.atprogram.program.pattern="&quot;{cmd.path}&quot; -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" tools.atprogram.program.xpattern="&quot;{cmd.path}&quot; {AVRSTUDIO_BACKEND_CONNECTION} -d {build.mcu} {program.verbose} {program.extra_params} program -c -f &quot;{build.path}\{build.project_name}.hex&quot;" version="1.6.1" compiler.path="{runtime.ide.path}/hardware/tools/avr/bin/" compiler.c.cmd="avr-gcc" compiler.c.flags="-c -g -Os -w -ffunction-sections -fdata-sections -MMD" compiler.c.elf.flags="-w -Os -Wl,--gc-sections" compiler.c.elf.cmd="avr-gcc" compiler.S.flags="-c -g -x assembler-with-cpp" compiler.cpp.cmd="avr-g++" compiler.cpp.flags="-c -g -Os -w -fno-exceptions -ffunction-sections -fdata-sections -fno-threadsafe-statics -MMD" compiler.ar.cmd="avr-ar" compiler.ar.flags="rcs" compiler.objcopy.cmd="avr-objcopy" compiler.objcopy.eep.flags="-O ihex -j .eeprom --set-section-flags=.eeprom=alloc,load --no-change-warnings --change-section-lma .eeprom=0" compiler.elf2hex.flags="-O ihex -R .eeprom" compiler.elf2hex.cmd="avr-objcopy" compiler.ldflags="" compiler.size.cmd="avr-size" build.extra_flags="" compiler.c.extra_flags="" compiler.c.elf.extra_flags="" compiler.S.extra_flags="" compiler.cpp.extra_flags="" compiler.ar.extra_flags="" compiler.objcopy.eep.extra_flags="" compiler.elf2hex.extra_flags="" recipe.c.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.c.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.c.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.cpp.o.pattern="&quot;{compiler.path}{compiler.cpp.cmd}&quot; {compiler.cpp.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.cpp.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.S.o.pattern="&quot;{compiler.path}{compiler.c.cmd}&quot; {compiler.S.flags} -mmcu={build.mcu} -DF_CPU={build.f_cpu} -DARDUINO={runtime.ide.version} -DARDUINO_{build.board} -DARDUINO_ARCH_{build.arch} {compiler.S.extra_flags} {build.extra_flags} {includes} &quot;{source_file}&quot; -o &quot;{object_file}&quot;" recipe.ar.pattern="&quot;{compiler.path}{compiler.ar.cmd}&quot; {compiler.ar.flags} {compiler.ar.extra_flags} &quot;{build.path}/{archive_file}&quot; &quot;{object_file}&quot;" recipe.c.combine.pattern="&quot;{compiler.path}{compiler.c.elf.cmd}&quot; {compiler.c.elf.flags} -mmcu={build.mcu} {compiler.c.elf.extra_flags} -o &quot;{build.path}/{build.project_name}.elf&quot; {object_files} &quot;{build.path}/{archive_file}&quot; &quot;-L{build.path}&quot; -lm" recipe.objcopy.eep.pattern="&quot;{compiler.path}{compiler.objcopy.cmd}&quot; {compiler.objcopy.eep.flags} {compiler.objcopy.eep.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.eep&quot;" recipe.objcopy.hex.pattern="&quot;{compiler.path}{compiler.elf2hex.cmd}&quot; {compiler.elf2hex.flags} {compiler.elf2hex.extra_flags} &quot;{build.path}/{build.project_name}.elf&quot; &quot;{build.path}/{build.project_name}.hex&quot;" recipe.size.pattern="&quot;{compiler.path}{compiler.size.cmd}&quot; -A &quot;{build.path}/{build.project_name}.elf&quot;" recipe.size.regex="^(?:\.text|\.data|\.bootloader)\s+([0-9]+).*" recipe.size.regex.data="^(?:\.data|\.bss|\.noinit)\s+([0-9]+).*" recipe.size.regex.eeprom="^(?:\.eeprom)\s+([0-9]+).*" tools.avrdude.cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" tools.avrdude.config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" tools.avrdude.upload.params.verbose="-v" tools.avrdude.upload.params.quiet="-q -q" tools.avrdude.upload.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {upload.verbose} -p{build.mcu} -c{upload.protocol} -P{serial.port} -b{upload.speed} -D &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.program.params.verbose="-v" tools.avrdude.program.params.quiet="-q -q" tools.avrdude.program.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {program.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{build.path}/{build.project_name}.hex:i&quot;" tools.avrdude.erase.params.verbose="-v" tools.avrdude.erase.params.quiet="-q -q" tools.avrdude.erase.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {erase.verbose} -p{build.mcu} -c{protocol} {program.extra_params} -e -Ulock:w:{bootloader.unlock_bits}:m -Uefuse:w:{bootloader.extended_fuses}:m -Uhfuse:w:{bootloader.high_fuses}:m -Ulfuse:w:{bootloader.low_fuses}:m" tools.avrdude.bootloader.params.verbose="-v" tools.avrdude.bootloader.params.quiet="-q -q" tools.avrdude.bootloader.pattern="&quot;{cmd.path}&quot; &quot;-C{config.path}&quot; {bootloader.verbose} -p{build.mcu} -c{protocol} {program.extra_params} &quot;-Uflash:w:{runtime.platform.path}/bootloaders/{bootloader.file}:i&quot; -Ulock:w:{bootloader.lock_bits}:m" build.usb_manufacturer="&quot;Unknown&quot;" build.usb_flags="-DUSB_VID={build.vid} -DUSB_PID={build.pid} '-DUSB_MANUFACTURER={build.usb_manufacturer}' '-DUSB_PRODUCT={build.usb_product}'" vm.platform.root.path="C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\arduino16x" upload.protocol="wiring" upload.maximum_size="253952" upload.speed="115200" bootloader.high_fuses="0xD8" bootloader.extended_fuses="0xFD" bootloader.file="stk500v2/stk500boot_v2_mega2560.hex" build.mcu="atmega2560" ide.hint="Arduino 1.6 Ide" ide.location.key="Arduino16x" ide.location.ide.winreg="Arduino 1.6.x Application" ide.location.sketchbook.winreg="Arduino 1.6.x Sketchbook" ide.location.sketchbook.preferences="sketchbook.path" ide.location.preferences="%VM_APPDATA_ROAMING%\arduino15\preferences.txt" ide.location.preferences_fallback="%VM_APPDATA_ROAMING%\arduino\preferences.txt" ide.default.version="160" ide.default.package="arduino" ide.default.platform="avr" ide.multiplatform="true" ide.includes="arduino.h" ide.platformswithoutpackage="false" ide.includes.fallback="wprogram.h" ide.extension="ino" ide.extension.fallback="pde" ide.versionGTEQ="160" ide.exe="arduino.exe" ide.hosts="atmel" ide.url="http://arduino.cc/en/Main/Software" ide.help.reference.path="{runtime.ide.path}\arduino.cc\en\Reference" vm.debug="true" software="ARDUINO" ssh.user.name="root" ssh.user.default.password="arduino" ssh.host.wwwfiles.path="/www/sd" build.working_directory="{runtime.ide.path}" ide.appid="arduino16x" location.sketchbook="D:\Documents\Arduino" build.core.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" build.core.parentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores" build.core.coresparentfolder.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.core.include="arduino.h" vm.boardsource.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" runtime.platform.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr" vm.platformname.name="avr" build.arch="AVR" build.variant.vmresolved="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" build.architecture="avr" vmresolved.compiler.path="C:\Program Files (x86)\Arduino\hardware\tools\avr\bin\" vmresolved.tools.path="C:\Program Files (x86)\Arduino\hardware\tools\avr" vm.runtime.compiler.showwarnings="false" serial.port.file="COM7" serial.port="COM7" serial.port.num="7" extra.time.local="51501509" includes=" -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega&quot;  -I&quot;D:\Documents\Arduino\libraries\AP_Math_freeimu&quot;  -I&quot;D:\Documents\Arduino\libraries\iCompass&quot;  -I&quot;D:\Documents\Arduino\libraries\HMC58X3&quot;  -I&quot;D:\Documents\Arduino\libraries\HMC5883L&quot;  -I&quot;D:\Documents\Arduino\libraries\MPU60X0&quot;  -I&quot;D:\Documents\Arduino\libraries\I2Cdev&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\EEPROM&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\Wire&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\SPI&quot;  -I&quot;D:\Documents\Arduino\libraries\DebugUtils&quot;  -I&quot;D:\Documents\Arduino\libraries\FreeIMU&quot;  -I&quot;D:\Documents\Arduino\libraries\DCM&quot;  -I&quot;D:\Documents\Arduino\libraries\AP_Filter&quot;  -I&quot;D:\Documents\Arduino\libraries\bmp085driver&quot;  -I&quot;D:\Documents\Arduino\libraries\Kalman&quot;  -I&quot;D:\Documents\Arduino\libraries\ATinyGPSPlus&quot;  -I&quot;C:\Program Files (x86)\Arduino\libraries&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries&quot;  -I&quot;C:\Program Files (x86)\Visual Micro\Visual Micro for Arduino\Micro Platforms\default\debuggers&quot;  -I&quot;D:\Documents\Arduino\libraries&quot;  -I&quot;C:\Program Files (x86)\Arduino\hardware\arduino\avr\libraries\Wire\utility&quot;" build.path="C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560" build.project_name="FreeIMU_serial_GY88" build.variant.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\variants\mega" build.core.path="C:\Program Files (x86)\Arduino\hardware\arduino\avr\cores\arduino" archive_file="core.a" object_file="C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\ATinyGPSPlus\TinyGPS++.cpp.o" source_file="D:\Documents\Arduino\libraries\ATinyGPSPlus\TinyGPS++.cpp" object_files="&quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\FreeIMU_serial_GY88.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Math_freeimu\AP_Math_freeimu.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Math_freeimu\matrix3.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Math_freeimu\vector2.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Math_freeimu\vector3.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\iCompass\iCompass.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\HMC58X3\HMC58X3.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\HMC5883L\HMC5883L.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\MPU60X0\MPU60X0.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\I2Cdev\I2Cdev.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\EEPROM\EEPROM.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\Wire\Wire.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\Wire\utility\twi.c.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\SPI\SPI.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\FreeIMU\CommunicationUtils.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\FreeIMU\FreeIMU.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\DCM\DCM.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Filter\DerivativeFilter.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Filter\LowPassFilter2p.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Filter\MovingAvarageFilter.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\AP_Filter\RunningAverage.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\bmp085driver\BMP085.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\Kalman\FilteringScheme.cpp.o&quot; &quot;C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560\ATinyGPSPlus\TinyGPS++.cpp.o&quot; " upload.verbose="-q -q" path="C:\Program Files (x86)\Arduino\hardware\tools" cmd.path="{runtime.ide.path}/hardware/tools/avr/bin/avrdude" config.path="{runtime.ide.path}/hardware/tools/avr/etc/avrdude.conf" />
    </Platform>
    <Compile IsDebugStart="1" CompilerErrors="0" ConfigurationName="Debug" StopOnError="False" OptimiseLibs="True" OptimiseCore="True" BuildPath="C:\Users\baruo_000\AppData\Local\V.Micro\Arduino\Builds\FreeIMU_serial_GY88\mega_atmega2560" SketchName="FreeIMU_serial_GY88" ReportDigitalPins="0" ReportAnalogPins="0" ReportI2C="0" ReportFreeMemory="0" IncludeDebug="1" LastDebugPreProcessorDefinitions="VM_DEBUG;VM_DEBUG_ENABLE 1;VM_DEBUG_BANDWIDTH_THROTTLE_MS 33;VM_DEBUGGER_TYPE_HARDWARESERIAL 0;VM_DEBUGGER_TYPE_SOFTWARESERIAL 1;VM_DEBUGGER_TYPE_FASTSERIAL 2;VM_DEBUGGER_TYPE_USB 3;VM_DEBUGGER_TYPE_TEENSY 4;VM_DEBUGGER_TYPE_UART 5;VM_DEBUGGER_TYPE_USART 6;VM_DEBUGGER_TYPE_USBSERIAL 7;VM_DEBUGGER_TYPE_TTYUART 8;VM_DEBUGGER_TYPE_NET_CONSOLE 9;VM_DEBUGGER_TYPE_Uart 10;VM_DEBUGGER_TYPE_COSA 11;VM_DEBUGGER_TYPE VM_DEBUGGER_TYPE_HARDWARESERIAL;VM_DEBUG_BREAKPAUSE;" IncludesDebug="1" IsCompiled="1" />
    <Debug EnableBreak="1" DebugEnabled="1" RemotePortSpeedWrittenToDebugSource="115200" />
    <VCCodeModel>
      <VCCodeMacros />
    </VCCodeModel>
    <BreakPoints>
      <BreakPoint Index="1" Name="FreeIMU_serial_GY88.ino, line 278" Id="6531d6a3-7a9a-422d-8544-97c3da0a312e" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\documents\arduino\freeimu_serial_gy88\freeimu_serial_gy88.ino" FileLine="278" FileColumn="1" FunctionName="loop()" FunctionLineOffset="182" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='6531d6a3-7a9a-422d-8544-97c3da0a312e'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>271	        #elif HAS_ITG3200()
272	           val_array[13] = my3IMU.rt;
273	        #endif
274	        serialPrintFloatArr(val_array, 18);
275	        //Serial.print('\n');
276	        
277	        #if HAS_GPS
--&gt;278	          val_array[0] = (float) gps.hdop.value();
279	          val_array[1] = (float) gps.hdop.isValid();
280	          val_array[2] = (float) gps.location.lat();
281	          val_array[3] = (float) gps.location.lng();
282	          val_array[4] = (float) gps.location.isValid();
283	          val_array[5] = (float) gps.altitude.meters();
284	          val_array[6] = (float) gps.altitude.isValid();
285	          val_array[7] = (float) gps.course.deg();
286	          val_array[8] = (float) gps.course.isValid();
287	          val_array[9] = (float) gps.speed.kmph();
</Source>
      </BreakPoint>
      <BreakPoint Index="2" Name="FreeIMU_serial_GY88.ino, line 290" Id="d4e75804-61d4-469f-ac63-b27d6774102c" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\documents\arduino\freeimu_serial_gy88\freeimu_serial_gy88.ino" FileLine="290" FileColumn="1" FunctionName="loop()" FunctionLineOffset="194" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='d4e75804-61d4-469f-ac63-b27d6774102c'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>283	          val_array[5] = (float) gps.altitude.meters();
284	          val_array[6] = (float) gps.altitude.isValid();
285	          val_array[7] = (float) gps.course.deg();
286	          val_array[8] = (float) gps.course.isValid();
287	          val_array[9] = (float) gps.speed.kmph();
288	          val_array[10] = (float) gps.speed.isValid();
289	          val_array[11] = (float) gps.charsProcessed();
--&gt;290	          serialPrintFloatArr(val_array,12);
291	          Serial.print('\n');
292	          smartDelay(20);
293	        #else
294	          Serial.print('\n');
295	        #endif 
296	       }
297	     }
298	
299	    #ifndef CALIBRATION_H
</Source>
      </BreakPoint>
      <BreakPoint Index="3" Name="FreeIMU_serial_GY88.ino, line 291" Id="46c4b762-7c6f-46a4-8430-87685e921d4f" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\documents\arduino\freeimu_serial_gy88\freeimu_serial_gy88.ino" FileLine="291" FileColumn="1" FunctionName="loop()" FunctionLineOffset="195" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='46c4b762-7c6f-46a4-8430-87685e921d4f'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>284	          val_array[6] = (float) gps.altitude.isValid();
285	          val_array[7] = (float) gps.course.deg();
286	          val_array[8] = (float) gps.course.isValid();
287	          val_array[9] = (float) gps.speed.kmph();
288	          val_array[10] = (float) gps.speed.isValid();
289	          val_array[11] = (float) gps.charsProcessed();
290	          serialPrintFloatArr(val_array,12);
--&gt;291	          Serial.print('\n');
292	          smartDelay(20);
293	        #else
294	          Serial.print('\n');
295	        #endif 
296	       }
297	     }
298	
299	    #ifndef CALIBRATION_H
300	    else if(cmd == 'c') {
</Source>
      </BreakPoint>
      <BreakPoint Index="4" Name="FreeIMU_serial_GY88.ino, line 231" Id="d86cf029-cfde-43ee-aa78-fe2e4783dae6" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\documents\arduino\freeimu_serial_gy88\freeimu_serial_gy88.ino" FileLine="231" FileColumn="1" FunctionName="loop()" FunctionLineOffset="135" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1d9993a7-8fc3-4e4a-befe-cf7c2a549399'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>224	          val_array[5] = (float) gps.altitude.meters();
225	          val_array[6] = (float) gps.altitude.isValid();
226	          val_array[7] = (float) gps.course.deg();
227	          val_array[8] = (float) gps.course.isValid();
228	          val_array[9] = (float) gps.speed.kmph();
229	          val_array[10] = (float) gps.speed.isValid();
230	          val_array[11] = (float) gps.charsProcessed();
--&gt;231	          serialPrintFloatArr(val_array,12);
232	          Serial.print('\n');
233	          smartDelay(20);
234	        #else
235	          Serial.print('\n');
236	        #endif        
237	      }
238	    } 
239	    else if(cmd == 'a') {
240	      float val_array[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
</Source>
      </BreakPoint>
      <BreakPoint Index="5" Name="FreeIMU_serial_GY88.ino, line 232" Id="4f3d81cf-82d8-42e7-8684-7880a7313d10" Enabled="1" Message="" MessageTextType="2" PreProcessedMessage="" Condition="" ConditionType="1" CurrentHits="0" File="d:\documents\arduino\freeimu_serial_gy88\freeimu_serial_gy88.ino" FileLine="232" FileColumn="1" FunctionName="loop()" FunctionLineOffset="136" FunctionColumnOffset="1" HitCountTarget="1" HitCountType="1" Language="C++" LocationType="3" Tag="&lt;vmbp Id='1e3331ea-6b8e-400e-9051-5e554bbc7a28'/&gt;" Type="1" ToString="System.__ComObject" BreakWhenHit="1">
        <Source>225	          val_array[6] = (float) gps.altitude.isValid();
226	          val_array[7] = (float) gps.course.deg();
227	          val_array[8] = (float) gps.course.isValid();
228	          val_array[9] = (float) gps.speed.kmph();
229	          val_array[10] = (float) gps.speed.isValid();
230	          val_array[11] = (float) gps.charsProcessed();
231	          serialPrintFloatArr(val_array,12);
--&gt;232	          Serial.print('\n');
233	          smartDelay(20);
234	        #else
235	          Serial.print('\n');
236	        #endif        
237	      }
238	    } 
239	    else if(cmd == 'a') {
240	      float val_array[18] = {0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0};
241	      uint8_t count = serial_busy_wait();
</Source>
      </BreakPoint>
    </BreakPoints>
  </Program>
</VisualMicro>